"""
Script that will calculate the theoretical sine wave generated by the DataPhysics V-20 shaker table. The experimental setup consists of the following:

                          ┌──────────────┐
                          │ Oscilloscope │
                          └─────▲────────┘
                                │
                                │
                          ┌─────┴─────┐
                          │ Waveform  │
                          │ Generator │
                          └─────┬─────┘
                                │
┌──────────────────┐      ┌─────▼──────────────┐
│ DataPhysics V-20 │      │ DataPhysics PA300E │
│ Vibration Table  ◄──────┤     Amplifier      │
└──────────────────┘      └────────────────────┘

The waveform generator will create a sinusoidal waveform at a given frequency, f, (minimum 10 Hz) that is sent to the amplifier. The amplifier then converts that to a signal that drives the vibration table at a higher amplitude.

We can measure this amplitude, A, as the total displacement of the shaker table from the backstroke to the forestroke. This can be done by eye, using a ruler. Then, we can determine the theoretical sine wave generated by this setup and compare it to the Thetis device for evaluation using the following equation:

    a(t) = -A * ω^2 * sin(ωt)

    where:  a(t) is the acceleration as a function of time [m/s/s]
            A is the displacement amplitude [m]
            ω=2πf is the angular frequency [rad/sec]

CHANGELOG:
 - Version 1.0: Initial Release

TODO:
"""

__author__      = "Braidan Duffy"
__copyright__   = "Copyright 2022"
__credits__     = "Braidan Duffy"
__license__     = "MIT"
__version__     = "1.0.0"
__maintainer__  = "Braidan Duffy"
__email__       = "bduffy2018@my.fit.edu"

from ctypes import *
import matplotlib.pyplot as plt
import datetime as dt
from math import pi
import numpy as np

# Constants and measurements
FREQUENCY = 3.3 # Hz
OMEGA = 2*pi*FREQUENCY # rad/sec
AMPLITUDE = 0.056/2 # m


class ThetisData(Structure):
    """
    Data structure used by Thetis to log telemetry data
    """
    _fields_ = [('epoch', c_long),
                ('mSecond', c_ulong),
                ('GPSYear', c_uint16),
                ('GPSMonth', c_uint8),
                ('GPSDay', c_uint8),
                ('GPSHour', c_uint8),
                ('GPSMinute', c_uint8),
                ('GPSSecond', c_uint8),
                ('GPSHundredth', c_uint8),
                ('voltage', c_float),
                ('GPSFix', c_bool),
                ('numSats', c_uint8),
                ('HDOP', c_uint8),
                ('latitude', c_long),
                ('longitude', c_long),
                ('GPSSpeed', c_long),
                ('GPSCourse', c_long),
                ('sysCal', c_uint8),
                ('gyroCal', c_uint8),
                ('accelCal', c_uint8),
                ('magCal', c_uint8),
                ('rawAccelX', c_float),
                ('rawAccelY', c_float),
                ('rawAccelZ', c_float),
                ('accelX', c_float),
                ('accelY', c_float),
                ('accelZ', c_float),
                ('rawGyroX', c_float),
                ('rawGyroY', c_float),
                ('rawGyroZ', c_float),
                ('gyroX', c_float),
                ('gyroY', c_float),
                ('gyroZ', c_float),
                ('rawMagX', c_float),
                ('rawMagY', c_float),
                ('rawMagZ', c_float),
                ('magX', c_float),
                ('magY', c_float),
                ('magZ', c_float),
                ('roll', c_float),
                ('pitch', c_float),
                ('yaw', c_float),
                ('linAccelX', c_float),
                ('linAccelY', c_float),
                ('linAccelZ', c_float),
                ('quatW', c_float),
                ('quatX', c_float),
                ('quatY', c_float),
                ('quatZ', c_float),
                ('imuTemp', c_float),
                ('state', c_uint8)]

# Read the data log file into memory
with open('data/log_056_4_5Hz.bin', 'rb') as file:
    epoch_data = []
    raw_accel_data = []
    accel_data = []

    data = ThetisData()
    while file.readinto(data) == sizeof(data):
        timestamp = dt.datetime.utcfromtimestamp(data.epoch) + dt.timedelta(milliseconds=data.mSecond)
        epoch_data.append(timestamp)
        raw_accel_data.append((data.rawAccelX))
        # accel_data.append((data.accelX, data.accelY, data.accelZ))
        accel_data.append(data.accelX)

# Generate theoretical sinusoidal data
START_INDEX = 0
# START_INDEX = 200
TIME_WIDTH = len(epoch_data)
# TIME_WIDTH = 200
END_INDEX = START_INDEX + TIME_WIDTH

t_epoch_data = np.linspace(0, 2, 1000)
t_sine_data = [pow(OMEGA,2) * AMPLITUDE * np.sin(OMEGA * t_epoch_data[x]) for x in range(len(t_epoch_data))]
# print(t_sine_data)

x_meas = [epoch_data[START_INDEX + x]-epoch_data[START_INDEX] for x in range(TIME_WIDTH)]
x_meas = [x_meas[x].total_seconds() for x in range(TIME_WIDTH)]

# Make plots
fig_accel = plt.figure(1)
ax_accel = fig_accel.add_subplot(1,1,1)
ax_accel.set_title("Comparison of Raw and Filtered Accelerations")
ax_accel.plot(epoch_data, raw_accel_data)
ax_accel.plot(epoch_data, accel_data)
ax_accel.set_xlabel("Timestamp")
ax_accel.set_ylabel("Accelerations [m/s/s]")
ax_accel.legend(["Raw", "Kalman Filtered"])


fig_comp = plt.figure(2)
ax_comp = fig_comp.add_subplot(1,1,1)
ax_comp.set_title("Comparison of Measured and Theoretical Accelerations")
ax_comp.plot(x_meas, raw_accel_data[START_INDEX:END_INDEX], 'o-')
ax_comp.plot(t_epoch_data, t_sine_data)
ax_comp.set_xlabel("Time [s]")
ax_comp.set_ylabel("Accelerations [m/s/s]")
ax_comp.legend(["Measured", "Theoretical"])

print("Number of samples: ", len(epoch_data)) #DEBUG
print("Total Sample Time: ", max(x_meas)) #DEBUG
print("Average Sample Rate: ", len(epoch_data) / max(x_meas)) #DEBUG

plt.show()
